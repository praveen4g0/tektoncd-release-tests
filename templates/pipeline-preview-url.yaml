---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: comment-first
spec:
  inputs:
    resources:
    - name: pr
      type: pullRequest
  outputs:
    resources:
      - name: pr
        type: pullRequest
  steps:
    - name: comment-first
      env:
        - name: PR
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        - name: WEBCONSOLE_URL
          valueFrom:
            configMapKeyRef:
              name: demo-config
              key: webconsole-url

        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              key: secretToken
              name: github-secret

      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/usr/bin/env bash
        set -eu
        statusurl=$(python -c "import json, sys;j = json.loads(sys.stdin.read());r=j['Base']['Repo'];print('https://api.github.com/repos/%s/statuses/%s' % (r['FullName'], j['Sha']))" < $(inputs.resources.pr.path)/pr.json)
        follow_url="${WEBCONSOLE_URL}/k8s/ns/${NS}/tekton.dev~v1alpha1~PipelineRun/${PR}"

        curl -f -s -o/dev/null -H "Content-Type: application/json" -H "Authorization: Bearer ${GITHUBTOKEN}" -X POST ${statusurl} -d "
        {
        \"state\": \"pending\",
        \"target_url\": \"${follow_url}\",
        \"description\": \"The build has started!\",
        \"context\": \"continuous-integration/tektoncd-preview\"
        }"

        randomgif=$(curl -s -L 'https://api.giphy.com/v1/gifs/search?api_key=dc6zaTOxFJmzC&q=build&rating=g&limit=10'|python -c "import json, random, sys;j = json.loads(sys.stdin.read());print(j['data'][random.randint(0,9)]['images']['fixed_height_downsampled']['url'])")
        mkdir -p $(outputs.resources.pr.path)
        cp -r $(inputs.resources.pr.path)/* $(outputs.resources.pr.path)/

        cat >$(outputs.resources.pr.path)/comments/new.json << EOF
        🏗👷‍♂️ Follow me building your beautiful PR [here](${follow_url}).

        ![and now for something different](${randomgif})
        EOF

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: comment-last
spec:
  inputs:
    resources:
    - name: pr
      type: pullRequest
  outputs:
    resources:
      - name: pr
        type: pullRequest
  steps:
    - name: comment-last
      env:
        - name: PR
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              key: secretToken
              name: github-secret
      image: quay.io/openshift/origin-cli:latest
      script: |
        #!/usr/bin/env bash
        set -eu

        mkdir -p $(outputs.resources.pr.path)
        cp -r $(inputs.resources.pr.path)/* $(outputs.resources.pr.path)/

        sha=$(python -c "import json, sys;r = json.loads(sys.stdin.read());print(r['Sha'][1:7])" < $(inputs.resources.pr.path)/pr.json)
        previewurl=https://$(oc get route tekton-demo-${sha} -o jsonpath='{.spec.host}')
        statusurl=$(python -c "import json, sys;j = json.loads(sys.stdin.read());r=j['Base']['Repo'];print('https://api.github.com/repos/%s/statuses/%s' % (r['FullName'], j['Sha']))" < $(inputs.resources.pr.path)/pr.json)
        curl -f -s -o/dev/null -H "Content-Type: application/json" -H "Authorization: Bearer ${GITHUBTOKEN}" -X POST ${statusurl} -d "
        {
        \"state\": \"success\",
        \"target_url\": \"${previewurl}\",
        \"description\": \"Preview URL has been generated!\",
        \"context\": \"continuous-integration/tektoncd-preview\"
        }"

        randomgif=$(curl -s -L 'https://api.giphy.com/v1/gifs/search?api_key=dc6zaTOxFJmzC&q=cat&rating=g&limit=10'|python -c "import json, random, sys;j = json.loads(sys.stdin.read());print(j['data'][random.randint(0,9)]['images']['fixed_height_downsampled']['url'])")

        cat >$(outputs.resources.pr.path)/comments/new.json << EOF
        🕺👀 Preview your PR [here](${previewurl})

        ![and now for something different](${randomgif})
        EOF

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: deploy
spec:
  inputs:
    resources:
    - name: source
      type: git
    - name: pr
      type: pullRequest
  steps:
  - name: deploy
    workingDir: $(inputs.resources.source.path)
    image: quay.io/openshift/origin-cli:latest
    script: |
      #!/usr/bin/env bash
      set -eu
      # Get SHA

      sha=$(python -c "import json, sys;r = json.loads(sys.stdin.read());print(r['Sha'][1:7])" < $(inputs.resources.pr.path)/pr.json)
      fullsha=$(python -c "import json, sys;r = json.loads(sys.stdin.read());print(r['Sha'])" < $(inputs.resources.pr.path)/pr.json)

      # Create Deployement
      oc delete -f <(sed -e "s/%FULLSHA%/${fullsha}/g" -e "s/%SHA%/${sha}/g" templates/deployment.yaml) 2>/dev/null || true
      oc create -f <(sed -e "s/%FULLSHA%/${fullsha}/g" -e "s/%SHA%/${sha}/g" templates/deployment.yaml)

      # Create route if not exist and add SSL
      oc get route tekton-demo-${sha} >/dev/null 2>/dev/null || {
        oc expose service tekton-demo-${sha}

        oc apply -f <(oc get route tekton-demo-${sha}  -o json  | \
        python -c "import json, sys;r = json.loads(sys.stdin.read());r['spec']['tls']={'insecureEdgeTerminationPolicy': 'Redirect', 'termination': 'edge'};print(json.dumps(r))")
      }

      # Done and over with
      echo "Preview your changes here: https://$(oc get route tekton-demo-${sha} -o jsonpath='{.spec.host}')"

---
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: preview-url
spec:
  resources:
    - name: image
      type: image
    - name: pr
      type: pullRequest
    - name: source
      type: git

  tasks:
  - name: comment-first
    taskRef:
      name: comment-first
    resources:
      inputs:
        - name: pr
          resource: pr
      outputs:
        - name: pr
          resource: pr

  - name: build
    taskRef:
      name: buildah
    runAfter: [comment-first]
    params:
      - name: TLSVERIFY
        value: "false"
    resources:
      inputs:
        - name: source
          resource: source
      outputs:
        - name: image
          resource: image

  - name: deploy
    runAfter: [build]
    taskRef:
      name: deploy
    resources:
      inputs:
        - name: source
          resource: source
        - name: pr
          resource: pr

  - name: comment-last
    runAfter: [deploy]
    taskRef:
      name: comment-last
    resources:
      inputs:
        - name: pr
          resource: pr
      outputs:
        - name: pr
          resource: pr
